# 1 "lexer.mll"
 
	open Types
	open Big_int

	(* Liste des mots-clés réservés *)
	let keywords = Hashtbl.create 29
	let () = List.iter (fun (id, symbol) -> Hashtbl.add keywords id symbol)
	[
		"access", TOK_KW_ACCESS;
		"and", TOK_KW_AND;
		"begin", TOK_KW_BEGIN;
		"else", TOK_KW_ELSE;
		"elsif", TOK_KW_ELSIF;
		"end", TOK_KW_END;
		"false", TOK_KW_FALSE;
		"for", TOK_KW_FOR;
		"function", TOK_KW_FUNCTION;
		"if", TOK_KW_IF;
		"in", TOK_KW_IN;
		"is", TOK_KW_IS;
		"loop", TOK_KW_LOOP;
		"new", TOK_KW_NEW;
		"not", TOK_KW_NOT;
		"null", TOK_KW_NULL;
		"or", TOK_KW_OR;
		"out", TOK_KW_OUT;
		"procedure", TOK_KW_PROCEDURE;
		"record", TOK_KW_RECORD;
		"rem", TOK_KW_REM;
		"return", TOK_KW_RETURN;
		"reverse", TOK_KW_REVERSE;
		"then", TOK_KW_THEN;
		"true", TOK_KW_TRUE;
		"type", TOK_KW_TYPE;
		"use", TOK_KW_USE;
		"while", TOK_KW_WHILE;
		"with", TOK_KW_WITH
	]

	(* Big integer equal to 2^31 *)
	let max_allowed_int = big_int_of_string "2147483648"

# 45 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\231\255\232\255\001\000\075\000\150\000\163\000\238\255\
    \240\255\002\000\003\000\030\000\246\255\046\000\249\255\250\255\
    \251\255\252\255\253\255\048\000\002\000\254\255\247\255\245\255\
    \243\255\241\255\238\000\057\001\055\000\233\255\003\000\254\255\
    \255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\023\000\021\000\020\000\021\000\255\255\
    \255\255\013\000\011\000\018\000\255\255\007\000\255\255\255\255\
    \255\255\255\255\255\255\016\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\021\000\019\000\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\028\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\031\000\000\000\
    \000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\020\000\020\000\020\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\020\000\000\000\000\000\000\000\000\000\003\000\
    \016\000\015\000\007\000\008\000\017\000\019\000\013\000\011\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\014\000\018\000\009\000\012\000\010\000\025\000\
    \024\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\023\000\022\000\021\000\029\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\006\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \001\000\255\255\004\000\255\255\004\000\004\000\004\000\004\000\
    \026\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\004\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\027\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\020\000\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\020\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\013\000\019\000\028\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\255\255\255\255\
    \255\255\255\255\004\000\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \255\255\255\255\255\255\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\255\255\255\255\
    \000\000\003\000\006\000\030\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\255\255\255\255\255\255\255\255\026\000\255\255\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\255\255\255\255\255\255\255\255\
    \027\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 64 "lexer.mll"
               ( token lexbuf )
# 232 "lexer.ml"

  | 1 ->
# 65 "lexer.mll"
                 ( comment lexbuf )
# 237 "lexer.ml"

  | 2 ->
# 67 "lexer.mll"
          ( TOK_SEMICOLON )
# 242 "lexer.ml"

  | 3 ->
# 68 "lexer.mll"
          ( TOK_COMMA )
# 247 "lexer.ml"

  | 4 ->
# 69 "lexer.mll"
          ( TOK_OPEN_PARENTHESIS )
# 252 "lexer.ml"

  | 5 ->
# 70 "lexer.mll"
          ( TOK_CLOSE_PARENTHESIS )
# 257 "lexer.ml"

  | 6 ->
# 71 "lexer.mll"
          ( TOK_COLON )
# 262 "lexer.ml"

  | 7 ->
# 72 "lexer.mll"
          ( TOK_DOT )
# 267 "lexer.ml"

  | 8 ->
# 73 "lexer.mll"
           ( TOK_TWO_DOTS )
# 272 "lexer.ml"

  | 9 ->
# 75 "lexer.mll"
          ( TOK_COMP (COMP_EQ) )
# 277 "lexer.ml"

  | 10 ->
# 76 "lexer.mll"
           ( TOK_COMP (COMP_DIFF) )
# 282 "lexer.ml"

  | 11 ->
# 77 "lexer.mll"
          ( TOK_COMP (COMP_GREATER_TH) )
# 287 "lexer.ml"

  | 12 ->
# 78 "lexer.mll"
           ( TOK_COMP (COMP_GREATER_EQ) )
# 292 "lexer.ml"

  | 13 ->
# 79 "lexer.mll"
          ( TOK_COMP (COMP_LESS_TH) )
# 297 "lexer.ml"

  | 14 ->
# 80 "lexer.mll"
           ( TOK_COMP (COMP_LESS_EQ) )
# 302 "lexer.ml"

  | 15 ->
# 82 "lexer.mll"
          ( TOK_OP_PLUS )
# 307 "lexer.ml"

  | 16 ->
# 83 "lexer.mll"
         ( TOK_OP_MINUS )
# 312 "lexer.ml"

  | 17 ->
# 84 "lexer.mll"
          ( TOK_OP_TIMES )
# 317 "lexer.ml"

  | 18 ->
# 85 "lexer.mll"
          ( TOK_OP_DIV )
# 322 "lexer.ml"

  | 19 ->
# 86 "lexer.mll"
           ( TOK_OP_REM )
# 327 "lexer.ml"

  | 20 ->
let
# 88 "lexer.mll"
            str
# 333 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 88 "lexer.mll"
                 ( 
					  let big_int_number = big_int_of_string str in
					  if gt_big_int big_int_number max_allowed_int then
					  	failwith ("Too large integer: " ^ str)
					  else
					    TOK_INT (int_of_big_int big_int_number)
					)
# 343 "lexer.ml"

  | 21 ->
let
# 96 "lexer.mll"
           str
# 349 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 96 "lexer.mll"
                ( let lowercase_id = String.lowercase str in
					  try
						Hashtbl.find keywords lowercase_id
					  with
					  	Not_found -> TOK_ID (lowercase_id)
					)
# 358 "lexer.ml"

  | 22 ->
let
# 103 "lexer.mll"
            c
# 364 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 103 "lexer.mll"
                    ( TOK_CHAR (c) )
# 368 "lexer.ml"

  | 23 ->
let
# 105 "lexer.mll"
       c
# 374 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 105 "lexer.mll"
            ( failwith ("Illegal character: " ^ String.make 1 c) )
# 378 "lexer.ml"

  | 24 ->
# 107 "lexer.mll"
          ( TOK_EOF )
# 383 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 30
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 110 "lexer.mll"
                ( token lexbuf )
# 395 "lexer.ml"

  | 1 ->
# 111 "lexer.mll"
        ( comment lexbuf )
# 400 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

