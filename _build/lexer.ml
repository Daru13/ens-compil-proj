# 1 "lexer.mll"
 
	(* TODO: à retirer, utiliser les types induits par les tokens du parser à la place *)
	open Tokens
	open Big_int

	(* Liste des mots-clés réservés *)
	let keywords = Hashtbl.create 31
	let () = List.iter (fun (id, symbol) -> Hashtbl.add keywords id symbol)
	[
		"access", ACCESS;
		"and", AND;
		(* "and then", AND_THEN; *)
		"begin", BEGIN;
		"else", ELSE;
		"elsif", ELSIF;
		"end", END;
		"false", FALSE;
		"for", FOR;
		"function", FUNCTION;
		"if", IF;
		"in", IN;
		"is", IS;
		"loop", LOOP;
		"new", NEW;
		"not", NOT;
		"null", NULL;
		"or", OR;
		(* "or else", OR_ELSE; *)
		"out", OUT;
		"procedure", PROCEDURE;
		"record", RECORD;
		"rem", REM;
		"return", RETURN;
		"reverse", REVERSE;
		"then", THEN;
		"true", TRUE;
		"type", TYPE;
		"use", USE;
		"while", WHILE;
		"with", WITH
	]

	(* Big integer equal to 2^31 *)
	let max_allowed_int = big_int_of_string "2147483648"

# 48 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\001\000\075\000\150\000\163\000\236\255\
    \238\255\002\000\003\000\030\000\244\255\046\000\032\000\249\255\
    \250\255\251\255\252\255\049\000\254\255\002\000\253\255\245\255\
    \246\255\243\255\241\255\239\255\238\000\057\001\056\000\231\255\
    \003\000\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\025\000\023\000\022\000\023\000\255\255\
    \255\255\015\000\013\000\020\000\255\255\008\000\007\000\255\255\
    \255\255\255\255\255\255\018\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\023\000\021\000\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\030\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \033\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\020\000\021\000\000\000\034\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\021\000\000\000\000\000\000\000\000\000\003\000\
    \016\000\015\000\007\000\008\000\017\000\019\000\013\000\011\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\014\000\018\000\009\000\012\000\010\000\027\000\
    \026\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\025\000\024\000\023\000\022\000\031\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\006\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \001\000\255\255\004\000\255\255\004\000\004\000\004\000\004\000\
    \028\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\004\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\029\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\021\000\255\255\032\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\021\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\013\000\014\000\019\000\030\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\255\255\255\255\
    \255\255\255\255\004\000\255\255\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \255\255\255\255\255\255\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\255\255\255\255\
    \000\000\003\000\006\000\032\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\255\255\255\255\255\255\255\255\028\000\255\255\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\255\255\255\255\
    \029\000\255\255\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 68 "lexer.mll"
               ( token lexbuf )
# 235 "lexer.ml"

  | 1 ->
# 69 "lexer.mll"
             ( Lexing.new_line lexbuf; token lexbuf )
# 240 "lexer.ml"

  | 2 ->
# 70 "lexer.mll"
                 ( comment lexbuf )
# 245 "lexer.ml"

  | 3 ->
# 72 "lexer.mll"
          ( SEMICOLON )
# 250 "lexer.ml"

  | 4 ->
# 73 "lexer.mll"
          ( COMMA )
# 255 "lexer.ml"

  | 5 ->
# 74 "lexer.mll"
          ( OPEN_PARENTHESIS )
# 260 "lexer.ml"

  | 6 ->
# 75 "lexer.mll"
          ( CLOSE_PARENTHESIS )
# 265 "lexer.ml"

  | 7 ->
# 76 "lexer.mll"
          ( COLON )
# 270 "lexer.ml"

  | 8 ->
# 77 "lexer.mll"
          ( DOT )
# 275 "lexer.ml"

  | 9 ->
# 78 "lexer.mll"
           ( TWO_DOTS )
# 280 "lexer.ml"

  | 10 ->
# 79 "lexer.mll"
           ( COLON_EQUAL )
# 285 "lexer.ml"

  | 11 ->
# 81 "lexer.mll"
          ( EQUAL )
# 290 "lexer.ml"

  | 12 ->
# 82 "lexer.mll"
           ( DIFFERENT )
# 295 "lexer.ml"

  | 13 ->
# 84 "lexer.mll"
          ( COMPARATOR (Greather_than) )
# 300 "lexer.ml"

  | 14 ->
# 85 "lexer.mll"
           ( COMPARATOR (Greater_eq) )
# 305 "lexer.ml"

  | 15 ->
# 86 "lexer.mll"
          ( COMPARATOR (Less_than) )
# 310 "lexer.ml"

  | 16 ->
# 87 "lexer.mll"
           ( COMPARATOR (Less_eq) )
# 315 "lexer.ml"

  | 17 ->
# 89 "lexer.mll"
          ( PLUS )
# 320 "lexer.ml"

  | 18 ->
# 90 "lexer.mll"
         ( MINUS )
# 325 "lexer.ml"

  | 19 ->
# 91 "lexer.mll"
          ( TIMES )
# 330 "lexer.ml"

  | 20 ->
# 92 "lexer.mll"
          ( DIV )
# 335 "lexer.ml"

  | 21 ->
# 93 "lexer.mll"
           ( REM )
# 340 "lexer.ml"

  | 22 ->
let
# 97 "lexer.mll"
            str
# 346 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 97 "lexer.mll"
                 ( 
					  let big_int_number = big_int_of_string str in
					  if gt_big_int big_int_number max_allowed_int then
					  	failwith ("Too large integer: " ^ str)
					  else
					    INT (int_of_big_int big_int_number)
					)
# 356 "lexer.ml"

  | 23 ->
let
# 105 "lexer.mll"
           str
# 362 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 105 "lexer.mll"
                ( let lowercase_id = String.lowercase str in
					  try
						Hashtbl.find keywords lowercase_id
					  with
					  	Not_found -> ID (lowercase_id)
					)
# 371 "lexer.ml"

  | 24 ->
let
# 112 "lexer.mll"
            c
# 377 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 112 "lexer.mll"
                    ( CHAR (c) )
# 381 "lexer.ml"

  | 25 ->
let
# 114 "lexer.mll"
       c
# 387 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 114 "lexer.mll"
            ( failwith ("Illegal character: " ^ String.make 1 c) )
# 391 "lexer.ml"

  | 26 ->
# 116 "lexer.mll"
          ( EOF )
# 396 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 32
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 119 "lexer.mll"
                ( token lexbuf )
# 408 "lexer.ml"

  | 1 ->
# 120 "lexer.mll"
        ( comment lexbuf )
# 413 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

